#lang eopl

;Qué significa cada cosa para scheme.
(define lexica '( 
  (espacio (whitespace) skip)
  (comentario ("//" (arbno(not #\newline)) ) skip)
  (numero (digit (arbno digit))  number )
  (numero ("-" digit (arbno digit) ) number )
  (numero (digit (arbno digit) "." digit (arbno digit) ) number)
  (texto (  letter (arbno (or digit letter " ")) ) string)
  (identificador ("@" letter (arbno (or letter digit))) symbol)
  
))

;;Cómo se escriben las cosas. EJ, una expresión puede escribir como un texto, o como una primitiva
;;(que en este caso la llamamos primapp-exp) y va seguida de [exp1, exp2, ...]
;;y una primitiva a su vez, puede ser escrita como +, -, * o /
(define gramatica
  '(
    (programa (expresion) un-programa)
    (expresion (numero) numero-lit)
    (expresion ("\"" texto "\"") texto-lit)
    (expresion (identificador) var-exp)
    (expresion (primitiva "[" (separated-list expresion ";" ) "]" ) primapp-exp)
    (primitiva ("+") suma)
    (primitiva ("-") resta)
    (primitiva ("*") multiplicacion)
    (primitiva ("/") div)
    (primitiva ("concat") concat)
    )
)

;;;;;;;;;;;;;;;;;;;;;;AMBIENTE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;definición del tipo de dato ambiente
(define-datatype enviroment enviroment?
  (empty-env-record)
  (extended-env-record
    (syms (list-of symbol?) )
    (vals (list-of scheme-value?))
    (env enviroment?)
   )
  )
(define scheme-value? (lambda (v) #t) )

;empty-env: --> enviroment
;función que crea un ambiente vacio
(define empty-env
  (lambda () (empty-env-record) ) ) ;;llamado al constructor de ambiente vacío

;extend-env: <list-of symbols> <list-of numbers> enviroment -> enviroment
;función que crea un ambiente extendido
(define extend-env
  (lambda (syms vals env)
    (extended-env-record syms vals env)))

;función que busca un símbolo en un ambiente
(define apply-env
  (lambda (env sym)
    (cases enviroment env
      (empty-env-record ()
                        (eopl:error 'apply-env "No binding for ~s" sym))

      (extended-env-record (syms vals env)
                           (let ((pos (list-find-position sym syms) ))
                             (if (number? pos)
                                 (list-ref vals pos)
                                 (apply-env env sym)
                                 )
                             )
                           )
                        )
      )
    )
;Funciones Auxiliares

;funciones auxiliares para encontrar la posición de un símbolo en la lista de símbolos de un ambiente
(define list-find-position
  (lambda (sym lis)
    (list-index (lambda (sym1) (eqv? sym1 sym)) lis ) 
    )
  )

(define list-index
  (lambda (pred ls)
    (cond
      ((null? ls) #f)
      ((pred (car ls)) 0)
      (else (let (
                  (list-index-r (list-index pred (cdr ls) ) )
              )
              (
               if (number? list-index-r)
                  (+ list-index-r 1)
                  #f
              )
         ) )

      )
    )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Construídos automáticamente:
(sllgen:make-define-datatypes lexica gramatica)

(define show-the-datatypes
  (lambda () ( sllgen:list-define-datatypes  lexica gramatica) ))
;********************************

;Parser, Scanner, Interfaz:
; El frontEnd (Análisis léxico (scanner) y sintático (parser) integrados)
(define scan&parse
  (sllgen:make-string-parser lexica gramatica))

; el analizador léxico (scanner)
(define just-scan
  (sllgen:make-string-scanner lexica gramatica ))

;Interpretador (interfaz) es el FrontEnd + Evaluación + señal para lectura
(define interpretador
  (sllgen:make-rep-loop "--> "
    (lambda (pgm) (evaluar-programa pgm))
    (sllgen:make-stream-parser
     lexica
     gramatica)))

;MEMORIA DEL PROGRAMA, es UN AMBIENTE:
(define MEMORIA
  (extend-env '(@x @y @z) '(1 2 3) (empty-env) ))

(define evaluar-programa
  (lambda (p)
    (cases programa p
      (un-programa (e) (evaluar-expresion e MEMORIA) )
      )
    )
  )

(define evaluar-expresion
  (lambda (exp amb)
    (cases expresion exp
      (numero-lit (n) n)
      (texto-lit (t) t)
      (var-exp (v) (apply-env amb v) )
      (primapp-exp  (prim lexp )

                  (let

                      (;zona de declaración
                       (levaluada (map (lambda (e) (evaluar-expresion e amb) )  lexp) )
                       )
                      (evaluar-primitiva levaluada prim) 
                      )
                    
                    )
    )
))

(define evaluar-primitiva
  (lambda (lvalores prim)
    (cases primitiva prim

      (suma () (sumarValores lvalores) )
      (concat () (concatenar lvalores) )

      (else #f)

      )
    ) )


(define concatenar
  (lambda (l)
    (if (null? l)
        ""
        (string-append (car l) (concatenar (cdr l) ) )
        )
    )
  )

(define sumarValores
  (lambda (l) 
               (cond
                 ( (null? l) 0)
                 (else (+ (car l) (sumarValores (cdr l)) ) )
                 )
               )
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;pruebas
;(scan&parse "1")
;(scan&parse " \"hola\" ")
;(scan&parse "+ [1;2;@x]")
;(interpretador)
