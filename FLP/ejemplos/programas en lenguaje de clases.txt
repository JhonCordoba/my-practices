(type-to-external-form (type-of-program
(scan&parse "let f = proc(? x, ? y, ? z)
            if zero?(x) then y else (z >(y,x) x y)
           g = proc(?a, ?b, ?c) 
                  if a then b else c
             in
             let h = (g true 5 6)
             i = proc(?d, ?e)
                    if >(d,e) then d else e
             in
            let
             invocacion = (f h (i 6 7) g)
            in
              i
")))
**********************
referencia: a=3, b=2
valor: b=1, a=1
 
 let a = 1
     b = if 5 then 1 else 2
     p = proc(x y f)
     begin
        set x = (f x y);
        x
     end
     q = proc(m n)
           begin
               set n = *(m, 2);
               +(m, n)
           end
 in
   begin
       (p a b q);
       +(a, b);
       b
   end
***********************
let a = 1
     b = if 5 then 2 else 1
     c = 3
     p = proc(x y z f)
     begin
        set y = (f y x);
        set z = +(y, 1);
        x
     end
     q = proc(m n)
           begin
               set n = *(m, 3);
               +(m, n)
           end
 in
   begin
       (p 1 3 2 q);
       set a = +(a, c);
       b
   end 
***********************
 let a = 1
     b = if 5 then 2 else 1
     c = 3
     p = proc(x y z f)
     begin
        set y = (f y x);
        set z = +(y, 1);
        x
     end
     q = proc(m n)
           begin
               set n = *(m, 3);
               +(m, n)
           end
 in
   begin
       (p a c b q);
       set a = +(a, c);
       b
   end
*********************
let a = 1
    b = 2
    c = 3
    p = proc(x y z f)
    begin
     set x = -(y, x);
     set y = (f z x);
     x
    end
    q = proc(m n)
    begin
      set n = *(m, 5);
      set  m = +(m, 6);
      +(m, n)  
    end
in
  begin
    (p c b a q);
    +(a, c)
   end
***********************

letrec
 factorial (n) = if n then *(n, (factorial -(n,1) ) ) else 1
in
 (factorial 6)

***********************
 let
 f = proc(?x, ?y, ?z, ?w)
      if zero?(x) then y else (w y z >(y,z) )
 g = proc(?a, ?b, ?c)
      if c then a else b
in
let
 h = (f 5 6 7 g)
 i = proc(? d, ? e)
     +(d,e)
 in
   (i (f h 5 7 g) (g 1 2 5) )

*********************************
class p1 extends object
 field a
 field b
 field c

 method initialize(f, g, h)
  begin
   set a = f;
   set b = g;
   set c = h;
   0
  end

 method setValor(p, q)
    begin
     set a = +(a, p);
     set b = +(b, q);
     set c = +(c, +(p,q));
     send self getValor(a,b)
    end

 method getValor(p,q)
    list( +(a,p), +(b,q), c)

class p2 extends p1
 field d
 field e
 
 method initialize(k, l, m)
   begin
     super initialize(k,l,m);
     set d = +(k,l);
     set e = +(k,m);
     0
   end
 
  method getValor(m,n)
    list(+(d,m), +(e,n))

class p3 extends p2
 field f

  method initialize(k,l,m)
   begin
    super initialize(k,l,m);
    set f = -(+(k,l),m);
    0
   end

   method getValor(m,n)
    list(+(f,m), -(f,n) )

let
 o1 = new p1(4,3,1)
 o2 = new p2(5,4,2)
 o3 = new p3(3,4,2)
 in
   let
     a = send o1 setValor(1,2)
     b = send o2 setValor(3,2)
     c = send o3 setValor(4,5)
   in
    list(a,b,c)
*******************************************
(type-to-external-form (type-of-program
(scan&parse "let f1 = proc((int->int) x, bool y, (bool->int) z, int w)
            if y then (z y) else (x w)
           f2 = proc(bool a) 
                  if a then 1 else -1
             in
             let f3 = proc(int b)
                        if >(b, 0) then (f2 >(b, 0)) else (f2 <(b,0))
             in
            (f1 f3 true f2 4)")))
**************************************
(type-to-external-form (type-of-program
(scan&parse "
 let
  f1 = proc( (int->int) x, (int->bool) y, int z )
        if(y 5) then (x z) else z
 in
  f1
")))
*************************************
(type-to-external-form (type-of-program
(scan&parse "
let f1 = proc((bool->int) x, (int -> bool) y, bool z)
            if (y 5) then (x (y 5)) else (x z)
             in
f1")))
************************************

*********************************
class p1 extends object
 field a
 field b
 field c

 method initialize(f, g, h)
  begin
   set a = f;
   set b = g;
   set c = h;
   0
  end

 method setValor(p, q)
    begin
     set a = +(a, p);
     set b = +(b, q);
     send self getValores()
    end

 method getValores()
    list( a, b, c)

class p2 extends p1
 field d
 field e
 
 method initialize(k, l, m)
   begin
     super initialize(k,l,m);
     set d = +(a,l);
     set e = +(b,m);
     set c = +(c,k);
     0
   end
 
  method getValores()
    list(a, b, c, d, e)

class p3 extends p2
 field f

  method initialize(k,l,m)
   begin
    super initialize(k,l,m);
    set f = +(+(k,l),m);
    0
   end

   method getValores(m,n)
    list(a,b,c,d,e,f)

let
 o1 = new p1(3,1,2)
 o2 = new p2(5,2,3)
 o3 = new p3(2,4,1)
 in
   let
     g = send o1 setValor(2,1)
     h = send o2 setValor(2,3)
     i = send o3 setValor(5,2)
   in
    list(g,h,i)
*******************************************
(type-to-external-form (type-of-program
(scan&parse "let f = proc(? x, int n1, int n2)
              if zero?(x) then false else =(n1,n2)
            in
              f
")))
*************************
1

let a = 1
    b = 2
    c = 3
    p = proc(x y z)
    begin
     set x = +(y, x);
     set y = *(add1(x), sub1(z));
     x
    end
 in
    begin
      (p c b a);
      set a = +(a, c);
      a
    end
*********************************
2

let a = 1
    b = 2
    c = 3
    p = proc(x y z)
    begin
     set y = +(y, x);
     set x = *(add1(y), sub1(x));
     x
    end
 in
    begin
      (p a b c);
      set c = +(a, c);
      a
    end

********************
4

(type-to-external-form (type-of-program
(scan&parse "
 let
  f1 = proc( (int->int) x, (int->bool) y, int z )
        if (y 5) then (x z) else z
 in
  f1
")))
********************
5

(type-to-external-form (type-of-program
(scan&parse "let
            
            f = proc(? x, ? y, ? z)
            if zero?(x) then y else (z >(y,x) x y)

            g = proc(?a, ?b, ?c) 
                  if a then b else c
             in
             let h = (g true 5 6)
             i = proc(?d, ?e)
                    if >(d,e) then d else e
             in
            let
             invocacion = (f h (i 6 7) g)
            in
              i
")))
**********************

6

(type-to-external-form (type-of-program
(scan&parse "let
            
            f = proc(int x, ? y, ? w)
              if y then x else (w x)

            g = proc(?a) 
                  if >(a, 0) then *(a,2) else *(a, -2)
             in
             let 
               h = (g -5)
               i = proc(? d)
                    if >(d,0) then true else false
             in
            let
             invocacion = (f h true i)
            in
              i
")))


**********************
7


class p1 extends object
 field a
 field b
 field c

 method initialize(f, g, h)
  begin
   set a = f;
   set b = g;
   set c = h;
   0
  end

 method setValor(p, q)
    begin
     set a = +(a, p);
     set b = +(b, q);
     send self getValores()
    end

 method getValores()
    list( a, b, c)

class p2 extends p1
 field d
 field e
 
 method initialize(k, l, m)
   begin
     super initialize(k,l,m);
     set d = +(a,l);
     set e = +(b,m);
     set c = +(c,k);
     0
   end
 
  method getValores()
    list(a, b, c, d, e)

class p3 extends p2
 field f

  method initialize(k,l,m)
   begin
    super initialize(k,l,m);
    set f = +(+(k,l),m);
    0
   end

   method getValores(m,n)
    list(a,b,c,d,e,f)

let
 o1 = new p1(1,2,3)
 o2 = new p2(5,4,3)
 o3 = new p3(2,4,6)
 in
   let
     g = send o1 setValor(1,2)
     h = send o2 setValor(3,2)
     i = send o3 setValor(4,5)
   in
    list(g,h,i)


**********************
